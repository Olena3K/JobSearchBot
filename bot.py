import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from parser import search_workua_jobs

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("bot.log")],
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ.")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Reply Keyboard –∑ –≥–æ—Ç–æ–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏
def get_search_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Python"), KeyboardButton(text="–ü—Ä–æ–¥–∞–≤–µ—Ü—å")],
            [KeyboardButton(text="–ú–µ–Ω–µ–¥–∂–µ—Ä"), KeyboardButton(text="–î–∏–∑–∞–π–Ω–µ—Ä")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return keyboard


@router.message(F.text == "/start")
async def send_welcome(message: Message):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ü–æ—à—É–∫ –≤–∞–∫–∞–Ω—Å—ñ–π", callback_data="search_jobs")
    builder.button(text="‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")
    await message.answer(
        "üëã –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=builder.as_markup(),  # –¢—ñ–ª—å–∫–∏ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    )


@router.callback_query(F.data == "search_jobs")
async def search_prompt(callback: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –≤–∏–±—Ä–∞–≤ –ø–æ—à—É–∫ –≤–∞–∫–∞–Ω—Å—ñ–π")
    await callback.message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ—Ñ–µ—Å—ñ—ó –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö:",
        reply_markup=get_search_keyboard(),  # Reply Keyboard –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
    )
    await callback.answer()


@router.callback_query(F.data == "about")
async def send_help(callback: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞")
    text = (
        "ü§ñ *SmartJobAlertsBot* ‚Äî —Ü–µ –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î —Ç–æ–±—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó —à–≤–∏–¥–∫–æ –π –∑—Ä—É—á–Ω–æ.\n\n"
        "üîé –ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä–∏ –ø–æ—à—É–∫, –≤–≤–µ–¥–∏ –±–∞–∂–∞–Ω—É –ø—Ä–æ—Ñ–µ—Å—ñ—é –∞–±–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—é, —ñ –±–æ—Ç –Ω–∞–¥–∞—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ Work.ua.\n"
        "üõ† –£ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –±—ñ–ª—å—à–µ —Å–∞–π—Ç—ñ–≤ —ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è —è–∫—ñ—Å–Ω—ñ—à–æ–≥–æ –ø–æ—à—É–∫—É.))"
    )
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()


@router.message(F.text == "/status")
async def status(message: Message):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /status –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    await message.answer("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")


@router.message()
async def handle_query(message: Message):
    logger.info(
        f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ—à—É–∫ –≤–∞–∫–∞–Ω—Å—ñ–π: '{message.text}' –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}"
    )
    await message.answer("üîé –®—É–∫–∞—é –≤–∞–∫–∞–Ω—Å—ñ—ó...")
    try:
        results = search_workua_jobs(message.text)
        await message.answer("\n\n".join(results), reply_markup=get_search_keyboard())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π: {e}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_search_keyboard(),
        )


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
